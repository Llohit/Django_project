To create a new project:
-create a virtual env using cmd "python -m venv venv"
-install all the dependencies inside the venv environment example
pip install django
pip install djangorestframework

settings.py
-It consists of all the config info that Django requires wrt the application built

wsgi (Web Server Gateway Interface)
-This is the medium thru which the application communicates with server requests.
-It handles standard HTTP requests and responses from-to application.
-The wsgi server receives the request and passes it to app, the app processes the request
and sends the respnse back to the server, the server then sends the resp to the client(browser).
-It only handles sync process (One request at a time).

asgi (Async Server Gateway Interface)
- Also handles async process (Multiple req at a time)
- Rest all same as wsgi

python manage.py makemigrations
-creates an migration file to describe changes

python manage.py migrate
-does the actual changes like creating/updating table

In serializer many=True is used when there are list of objects which needs to be
serialized example:

[
    {
        "id": 1,
        "name": "John Doe",
        "email": "johndoe@example.com"
    },
    {
        "id": 2,
        "name": "Jane Doe",
        "email": "janedoe@example.com"
    }
]

When you have single object to serialize don't use many=True
e.g
    {
        "id": 1,
        "name": "John Doe",
        "email": "johndoe@example.com"
    }

In serializer partial=True is used when we want to accept partial data from user.

Why jwt?
1. To check only authorized user(user who is logged in) is making the API call.
Process:
1.Whenever a user logs in successfully, a token is created for that user.
2.The user(Or UI) stores that token to make subsequent API calls.
3.By this, the backend confirms that the user who was logged in with correct creds is only making the API calls.

Can be compromised?
1. If secret key is shared.
2. If direct whole token is shared

The token generated by the jwt has 3 parts

1.Header
2.Payload
3.Signature

"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo0OTI3LCJjcmVhdGVkX2F0IjoiMjAyNS0wMi0yM1QxNzozMjoyOC4zMDI3MjgifQ.zvT6a4wlo9mtPRpK6BrU2yrPqKETMQ4oN3x40icDeqg
"
Each payload is one-one assoc with signature
So If Someone has a base64(not encoded) payload and not signature, they can see the payload
But cannot modify it to create a token for another payload, because even if another token is created
with other payload, the signature will be different and back end will catch that saying
"Signature not match for the payload"(because that payload was assoc with other secret key which is not known)